<?php
// header('Content-Type: text/plain');

// 세션을 사용하려면 세션 시작 함수 선호출 필수
session_start();

// session_regenerate_id();

$_SESSION['cnt'] = 10;

var_dump($_SESSION);


// phpinfo();

// PHPSESSID는 PHP가 제공하는 파일 이름 같은 것
    // 세션에 저장된 데이터가 해당 파일 안에 적혀있음
    // 해당 파일은 (현재 사용중인 시스템에 따라) /Applications/XAMPP/xamppfiles/temp/ 위치에 저장되며
    // 우리가 세션에 접근할 때마다 PHP가 이 파일을 읽고 쓰는 것


// 중요한 점은, cookie와 다르게 session은 사용자 조작이 불가능하다는 점
    // 개발자 도구에서 session을 확인하면 php가 제공하는 파일명만 나옴
    // 해당 파일명을 수정하게되면 읽고 쓸 파일이 없어져 empty array가 출력됨!


// 사용자의 브라우저에는 세션 ID (PHPSESSID) 가 쿠키로 저장됨
// 사용자가 브라우저를 닫으면 서버의 세션 데이터가 즉시 사라지지는 않지만 (쿠키와 세션의 차이점)
// 브라우저를 닫으면 세션 쿠키(PHPSESSID)가 사라질 수 있고, 다음 방문 시 새로운 세션 ID가 발급되므로 기존 세션에 접근할 수 없게 됨
// 결국, 기본적으로 PHP가 발급하는 세션은 "세션 쿠키", 즉 브라우저가 꺼질 때 자동으로 삭제되는 쿠키임
// 세션을 유지하려면 세션 쿠키의 만료 시간을 명시적으로 설정하면 됨


// 세션이 만능은 아님. 해커가 네트워크 패킷을 엿보고 나인척 내 컴퓨터에 접근해서 세션 아이디를 읽고 세션 파일을 읽으면 데이터가 도난당할 수 있음
    // (public wifi 사용 금자, https 사용 등으로 최대한 예방 필요)

// session_regenerate_id(true)는 기존의 세션 ID를 무효화하고 새로운 세션 ID를 생성하는 함수
// true를 인자로 주면, 기존 세션 데이터를 새로운 세션 ID로 안전하게 이동시키고, 이전 세션 ID는 파기
// 세션 ID를 주기적으로 바꾸면, 탈취한 세션 ID가 금방 무효화됨 (내가 로그인 했을때 로그인 정보를 세션에 저장 후 세션 아이디 바꿔주면 해커가 탈취한 (이전)세션 정보로 로그인 시도시 불발)

/*
하지만 이또한 완벽하지 않으며, 다음과 같은 방법으로 해킹 공격을 대비해야함
HTTPS를 통해 트래픽 암호화 (패킷 엿보기를 막음)
세션 쿠키에 HttpOnly, Secure, SameSite 속성 설정
XSS 방지 (세션 ID를 훔치는 스크립트 차단)
로그인 시와 중요한 행동 시 session_regenerate_id() 사용
세션 타임아웃 설정
*/